<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kurun&#39;s Blog</title>
    <link>https://Kurun-pan.github.io/</link>
    <description>Recent content on Kurun&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>kurunpan09@gmail.com (Kurun / くるん)</managingEditor>
    <webMaster>kurunpan09@gmail.com (Kurun / くるん)</webMaster>
    <lastBuildDate>Mon, 17 Aug 2020 00:00:01 +0900</lastBuildDate>
    
	<atom:link href="https://Kurun-pan.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>xv6のRISC-V版とそのビルド手順など</title>
      <link>https://Kurun-pan.github.io/post/2020-08-17-riscv-tests/</link>
      <pubDate>Mon, 17 Aug 2020 00:00:01 +0900</pubDate>
      <author>kurunpan09@gmail.com (Kurun / くるん)</author>
      <guid>https://Kurun-pan.github.io/post/2020-08-17-riscv-tests/</guid>
      <description>RISC-Vの検証用テストプログラムであるriscv-testsについて情報をまとめました。 RISC-Vエミュレータ開発においても、このテストプログラムがPASSするようにテスト駆動型開発 (TDD) を基本に進めました。
riscv-tests ディレクトリ構造  riscv-testsには、isaとbenchmarksの2つが用意されています。isaが各命令のテストプログラムで、 benchmarksがdhrystoneやクイックソートなどのベンチマーク用のプログラムです。
isaディレクトリ以下には 以下のようにテスト内容毎にディレクトリが分けられています。
   ディレクトリ名 Bits Privilege 命令の種類     rv32mi 32 Machine RV32I (基本命令系)   rv32si 32 Supervisor RV32I (基本命令系)   rv32ua 32 User RV32A (アトミック命令系)   rv32uc 32 User RV32C (圧縮命令系)   rv32ud 32 User RV32D (倍精度 浮動小数点演算命令系)   rv32uf 32 User RV32F (単精度 浮動小数点演算命令系)   rv32ui 32 User RV32I (基本命令系)   rv32um 32 User RV32M (乗除命令系)   rv64mi 64 Machine RV64I (基本命令系)   rv64si 64 Supervisor RV64I (基本命令系)   rv64ua 64 User RV64A (アトミック命令系)   rv64uc 64 User RV64C (圧縮命令系)   rv64ud 64 User RV64D (倍精度 浮動小数点演算命令系)   rv64uf 64 User RV64F (単精度 浮動小数点演算命令系)   rv64ui 64 User RV64I (基本命令系)   rv64um 64 User RV64M (乗除命令系)    OK/NGの判定方法  Spike というRISC-V公式のRISC-V向けの命令セットシミュレータ(ISS)において、 Host Target Interface (HTIF) というハードウェアテスト用の通信仕様が定められています。</description>
    </item>
    
    <item>
      <title>xv6のRISC-V版とそのビルド手順など</title>
      <link>https://Kurun-pan.github.io/post/2020-08-16-xv6-riscv/</link>
      <pubDate>Sun, 16 Aug 2020 18:00:01 +0900</pubDate>
      <author>kurunpan09@gmail.com (Kurun / くるん)</author>
      <guid>https://Kurun-pan.github.io/post/2020-08-16-xv6-riscv/</guid>
      <description>     xv6という小さなOSのRISC-V版のビルド手順についてまとめました。
xv6とは？  MITが開発したUnixの思想をベースにした教育用途の小さなOSです。
ソースコード 公式オリジナルのソースコードは以下？
https://github.com/mit-pdos/xv6-public
RISC-V向けxv6のビルド手順  RISC-VかつQEMUで動作するように向けにポーティングされたxv6のソースコードは 以下にあります。
https://github.com/mit-pdos/xv6-riscv
教育用と言うだけあってソースコードの量もかなり少なく、ビルドもすぐに終わります。
事前準備 RISC-V Toolchainのインストール手順の手順に従って、RISC-VのToolchainをインストールしておきます。
ソースコード取得 $ git clone https://github.com/mit-pdos/xv6-riscv カーネルのビルド $ cd xv6-riscv $ make ビルドが成功するとkernel/ディレクトリにkernelファイル (efl) が作成されています。 これがxv6のカーネルのイメージです。エントリーポイントは0x8000_0000になっている様子です。
Userlandプログラムのビルド Userland側のイメージをビルドして、ファイルシステム用のイメージデータを作成します。
xv6カーネルは、ブート終盤にvirtio diskに格納されるこのファイルシステムをメインメモリにロードし、 catやlsといったユーザプログラムをシェルから使えるようにしてくれます。
$ make fs.img ビルドが成功すると、カレントディレクトリにfs.imgファイルが作成されているはずです。
xv6 for RISC-Vの構成  CPU2コアで動作するように作られている様子ですが、1コアだけでも動作します。
ペリフェラルは、UART 1ch, PLIC (割り込みコントローラ), CLINT (TImer), Virtio (ディスク)の4つを想定しており、 メモリマップはmemlayout.hに定義されています。割り込みはUart (ID=1) と Virtio (ID=10) の2つだけです。
参考文献   mit-pdos/xv6-riscv  </description>
    </item>
    
    <item>
      <title>RISC-V Toolchainのインストール手順</title>
      <link>https://Kurun-pan.github.io/post/2020-08-16-riscv-toolchain/</link>
      <pubDate>Sun, 16 Aug 2020 17:47:01 +0900</pubDate>
      <author>kurunpan09@gmail.com (Kurun / くるん)</author>
      <guid>https://Kurun-pan.github.io/post/2020-08-16-riscv-toolchain/</guid>
      <description>RISC-Vプロセッサ向けのToolchain (クロスコンパイラ) のインストール手順を解説します。 対象OSはmacOSですが、基本的にLinux (Ubuntuなど) でも同じ手順です。
インストール手順  必要なパッケージのインストール $ brew install python3 gawk gnu-sed gmp mpfr libmpc isl zlib expat Toolchainのビルドとインストール makeコマンドを実行することで、インストールまで実行されます。 また、git cloneにも結構な時間を要します。ビルドも同様です。。
configureのprefixオプションには、インストール先のパスを指定します。
$ git clone --recursive https://github.com/riscv/riscv-gnu-toolchain $ cd riscv-gnu-toolchain $ ./configure --prefix=/opt/riscv $ sudo make PATH追加 $export PATH=$PATH:/opt/riscv/bin 動作確認  $ /opt/riscv/bin/riscv64-unknown-elf-gcc --version riscv64-unknown-elf-gcc (GCC) 10.1.0 Copyright (C) 2020 Free Software Foundation, Inc. This is free software; see the source for copying conditions.</description>
    </item>
    
    <item>
      <title>How to use Hugo</title>
      <link>https://Kurun-pan.github.io/post/2020-08-16-how-to-use-hugo/</link>
      <pubDate>Sun, 16 Aug 2020 06:38:27 +0900</pubDate>
      <author>kurunpan09@gmail.com (Kurun / くるん)</author>
      <guid>https://Kurun-pan.github.io/post/2020-08-16-how-to-use-hugo/</guid>
      <description>Github Pages + Hugoでブログを投稿するために最低限使うコマンドの備忘録です。 テンプレートとして利用しているテーマはBeautiful Hugoです。
新しい記事を作成する $ hugo new content/post/{適当な文字列。何でも良い}.md 作成した記事を確認する $ hugo server -D リリース用データ (publicディレクトリ) を作成する $ hugo 参考   GitHub PagesとHugoでブログをつくった Hugoのテーマ一覧  </description>
    </item>
    
    <item>
      <title>初めての投稿</title>
      <link>https://Kurun-pan.github.io/post/2020-08-15-first-post/</link>
      <pubDate>Sat, 15 Aug 2020 20:35:18 +0900</pubDate>
      <author>kurunpan09@gmail.com (Kurun / くるん)</author>
      <guid>https://Kurun-pan.github.io/post/2020-08-15-first-post/</guid>
      <description>ブログ開設しました 今までレンタルサーバーを借りてブログを運用したり、QiitaやMeduim, noteなどの無料の スペースを利用したりしていましたが、本日Github Pagesを利用したブログデビューしました。
何書くの？ 自分が学んだことのアウトプットを出す自由な場として、技術ネタ中心に記事を投稿しようと思います。</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>https://Kurun-pan.github.io/page/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>kurunpan09@gmail.com (Kurun / くるん)</author>
      <guid>https://Kurun-pan.github.io/page/about/</guid>
      <description>Who are you? ソフトウェアエンジニア@都内某メーカー勤務です。 仕事では下回りのシステムソフトウェアの経験が主ですが、ミドルウェア以下を幅広く担当しています。 最近はGUI周りのソフトウェア開発やってます。
プライベートでは、Androidアプリを開発して配信したり、最近ではRust言語で RISC-V CPUのエミュレータを開発してxv6やLinuxなどのOSをそのエミュレータ 上で動かそうとしていたり、技術書典向けにいくつかの書籍を執筆しています。
 Booth: https://kurun.booth.pm/  専門分野  Embedded System &amp;amp; Software Linux, Android SoC (System on Chip) (昔、数年だけLSI開発経験あり)  Computer Skills  C/C++ Dart (Flutter) Rust Java Kotlin (少しだけ) Docker / コンテナランタイム (runcなど) Linux  Hardware Skills  ARM64 RISC-V Intel X64 FPGA VerilogとかLSI開発関連のツールなど  開発に何らか関わった製品 以下の商品の開発に携わり、自分が書いたソースコードを搭載した製品群を世の中にリリースしています。 良かったら買ってください (何を？) 。
 Digital TV 4K Projector DVD/BD disk drive Video game console Consumer Printer &amp;amp; Scanner Medical equipments Automotive (HEV/PHEV/EV)  その他メディア  Twitter: https://twitter.</description>
    </item>
    
  </channel>
</rss>